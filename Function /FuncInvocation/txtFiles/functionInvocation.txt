JavaScript Function Invocation 

The code inside a JavaScript function will execute when "something" invokes it. 

Invoking a JavaScript Function

The code inside a function is not executed when the function is defined. 

The code inside a function is executed when the function is invoked. 

It is common to use the term "call a function" instead of "invoke a function".

It is also common to say "call upon a function","start a function",or "execute a function".

It is also common to say "call upon a function","start a function", or "execute a function".
============================================
===========================================
==================================================
==================================================

Invoking a function as a function 

Example: 

function myFunction(a,b){
    return a*b;
}
myFunction(10,2); // will return 20

==================================================
///HTML
<!DOCTYPE html> 
<html>
<body> 
<h2> JavaScript Functions</h2>
<p> The  global function (myFunction) returns the product of the arguments(a,b):</p>

<p id = "demo"></p>

<script> 
function myFunction(a,b){
    return a*b;
}
document.getElementById("demo").innerHTML = myFunction(10,2);
</script>
</body>
</html>
===================================================

The function above does not belong to any object. But in JavaScript there is always a default global object. 

In HTML the default global object is the HTML page itself, so the function above "belong" to the HTML page. 

In a browser the page object is the browser window. The function above automatically becomes a window function.


==> NOTE: This is common way to invoke a JavaScript function , but not a very good practice. 
Global variables, methods, or functions can easily create name conflicts and bugs in the global object. 


myFunction() and window.myFunction() is the same function: 

function myFunction(a,b){
    return a*b;

}
window.myFunction(10,2); // will also return 20
