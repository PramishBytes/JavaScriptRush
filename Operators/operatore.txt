JavaScript Operators

They are used to perform different types of mathematical operations

Types of JavaScript Operators 

There are different types of JavaScript Operators: 

-> Arithmetic operators 
-> Assignment operators
-> Comparison operators
-> String Operators 
-> Logical Operators
-> Bitwise Operators 
-> Ternary operators 
-> Type operators

==========================

JavaScript Assignment Operators

The Assignment operator (=) assigns a value to a variable 

example: 

let x = 10;

==============================

JavaScript Addition 

The Addition operator (+) adds numbers

let x=5;
let y=4;
let z=x+y;

================================

JavaScript Multiplication 

The Multiplication Operator (*) multiplies numbers:

let x =3;
let y= 6;
let z = x*y;

================================

JavaScript Artithmetic Operators 

Arithmetic Operators are used to perform arithmetic on numbers: 

let a =4; 
let x =(1000+50)*a;

=================================

Operator	Description
+	        Addition
-	        Subtraction
*	         Multiplication
**	          Exponentiation (ES2016)
/	          Division
%	          Modulus (Division Remainder)
++	          Increment
--	          Decrement

=> Note: Arithmetic operators assign values to JavaScript chapter.

========================================

Assignment Operators 

Assignment operators assign values to JavaScript variales.

The Addition Assignment Operator (+=) adds a value to a variable.

let x = 10;
x+=5; 

Operator	Example	 Same As
=	         x = y	 x = y
+=	        x += y	 x = x + y
-=	         x -= y	 x = x - y
*=	         x *= y	 x = x * y
/=	         x /= y	 x = x / y
%=	         x %= y	 x = x % y
**=	        x **= y	 x = x ** y

================================================

JavaScript Comparison Operators

Operator	Description
==	        equal to
===	        equal value and equal type
!=	        not equal
!==	        not equal value or not equal type
>	        greater than
<	        less than
>=	        greater than or equal to
<=	        less than or equal to
?	        ternary operator

All the comparison operators above can also be used on strings:

let text1 = "A";
let text2 ="B";
let result = text1+text2;


=> Note: The strings are compared alphabetically 

Example: 

let text1 = "20";
let text2 = "5";
let result = text1<text2;

JavaScript String Addition : 

The + cna also be used to add (concatenate) strings: 

let text1 = "Pramish";
let text2 = "Adhikari";
let text3= text1+ " " + text2;


The += assignment operator can also be used to add (concatenate) strings: 

let text1 = "What a very"; 
text1 += "nice day" ;

=> Note: When used on string, the + operator is called the conctenation operator. 
=================================================================

Adding Strings and Numbers: 

Adding the two numbers, will return the sum, but adding a number and a string will return a string: 

let x = 5+5;
let y ="5" +5; 
let z = "Hello" + 5; 

Output: 

10
55
Hello5

=> Note: If you add a number and a string, the result will be a string!

================================================

JavaScript Logical Operators 

Operator	Description
&&	        logical and
||	        logical or
!	        logical not

======================================================



JavaScript Type Operators 

Operator	    Description
typeof	        Returns the type of a variable
instanceof	    Returns true if an object is an instance of an object type

=============================================================



JavaScript Bitwise Operators 

Bit operaotrs work on 32 bits numbers.

Any numeric operand in the operation is converted in to a 32 bit number. 
The result is converted back to a JavaScript number. 


Operator	Description	        Example	    Same as	        Result	    Decimal
&	        AND	                5 & 1	    0101 & 0001	    0001	        1
|	        OR	                 5 | 1	    0101 | 0001	    0101	         5
~	        NOT	                 ~ 5	    ~0101	        1010	         10
^	        XOR	                 5 ^ 1	    0101 ^ 0001	    0100	         4
<<	        left shift	         5 << 1	    0101 << 1	    1010	        10
>>	        right shift	         5 >> 1	    0101 >> 1	    0010	         2
>>>	        unsigned right shift 5>>>1	    0101 >>> 1	    0010	          2

=======================================================================




















